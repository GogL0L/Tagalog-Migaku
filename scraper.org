#+title: Tagalog dictionary scraper
#+description: Scrapes the dictionary online dictionary "https://tagalog.pinoydictionary.com" and saves it to the files 'dictionary.json' and 'conjugations.json' in the migaku format. OBSERVE THAT PERMISSION FROM PINOY DICTIONARY © MUST BE REQUIRED IN ORDER TO EXECUTE THE CODE AND THUS SCRAPE THE WEBSITE. THE PURPOSE OF THIS CODE IS EXCLUSIVELY FOR EDUCATIONAL REASONS, SPECIFICALLY HOW ONE WOULD SCRAPE WITH A FUNCTIONAL LANGUAGE, IN THIS CASE FSHARP, APART OF THE DOTNET FRAMEWORK BY MICROSOFT ©.
#+PROPERTY: header-args :tangle ./scraper.fsx :padline 2



* Scraper

** Disclarimer
#+begin_src fsharp :results output :session :padline 0
//OBSERVE THAT PERMISSION FROM PINOY DICTIONARY © MUST BE REQUIRED IN ORDER TO
//EXECUTE THE CODE AND THUS SCRAPE THE WEBSITE. THE PURPOSE OF THIS CODE IS
//EXCLUSIVELY FOR EDUCATIONAL REASONS, SPECIFICALLY HOW ONE WOULD SCRAPE WITH A
//FUNCTIONAL LANGUAGE, IN THIS CASE FSHARP, APART OF THE DOTNET FRAMEWORK BY
//MICROSOFT ©.
#+end_src

** Header

#+begin_src fsharp :results output :session
#r "nuget: FSharp.Data, 4.0.1"
#r "nuget: FsVerbalExpressions, 0.6.1"
#r "nuget: FSharp.Json, 0.4.0"

open FSharp.Data
open FsVerbalExpressions.FsRegEx
open System
open System.IO
open FSharp.Json

printfn "Header works"
#+end_src

#+RESULTS:
: /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: [Loading /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj.fsx]
: namespace FSI_0051.Project
: 
: Header works



** Entry type

#+begin_src fsharp :results output :session
type Entry = {Word: string
              Definition: string
              Conjugations: list<string>}
#+end_src

#+RESULTS:


** Helper function firstChildText

#+begin_src fsharp :results output :session
let firstChildText selector (post : HtmlNode) =
    post.CssSelect(selector).[0].DirectInnerText().Trim()
#+end_src

#+RESULTS:


** Konvertera wordgroup html node till relevanta saker

#+begin_src fsharp :results output :session
let wordGroupToWord (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".word-entry").[0]
    |> firstChildText "a"

let wordGroupToInfo (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".definition").[0]
    |> firstChildText "p"
#+end_src

#+RESULTS:


** Regex stuff

#+begin_src fsharp :results output :session
let infoToConjugations (info:string) : List<string> =
    let prefix = @"(.+?)\."
    let parenthesis = @"\((?<conjugations>.*)\)"
    info
    |> matches prefix
    |> Array.head
    |> sprintf "%A"
    |> capture parenthesis "conjugations"
    |> sprintf "%s"
    |> fun str -> str.Split [|','|]
    |> Seq.map (fun str -> str.Trim ())
    |> Seq.toList
    |> fun lst -> if lst = [""] then [] else lst
    //|> List.map String.Trim


let infoToDefinitions (info:string) : string =
    let suffix = @"\w*\.(.+)"
    info
    |> matches suffix
    |> Array.head
    |> sprintf "%A"
#+end_src

#+RESULTS:



** wordGroupToEntry (samt wordGroupToConj och wordGroupToDef)

#+begin_src fsharp :results output :session
let wordGroupToConj (wordgroup : HtmlNode) : List<string> =
    wordgroup
    |> wordGroupToInfo
    |> infoToConjugations
    

let wordGroupToDef (wordgroup : HtmlNode) : string =
    wordgroup
    |> wordGroupToInfo
    |> infoToDefinitions
    
let wordGroupToEntry (wordgroup : HtmlNode) : Entry =
    {Word = wordGroupToWord wordgroup
     Definition = wordGroupToDef wordgroup
     Conjugations = wordGroupToConj wordgroup}
#+end_src

#+RESULTS:


*** Test av wordGroupToEntry

#+begin_src fsharp :results output :session :tangle no
let result = wordGroupToEntry words.[2]
printfn "The result: %A" result
#+end_src

#+RESULTS:
: The result: { Word = "dagit"
:   Definition = "n. swooping and seizing while in flight"
:   Conjugations = [] }
: val result : Entry = { Word = "dagit"
:                        Definition = "n. swooping and seizing while in flight"
:                        Conjugations = [] }



** Get webpage

#+begin_src fsharp :results output :session
let getWebPageURL (char:char) (number:int) : string = 
    sprintf "%s/%O/%s/"
        "https://tagalog.pinoydictionary.com/list"
        char
        (string number)
#+end_src

#+RESULTS:


*** Test av getWebPageURL
#+begin_src fsharp :results output :session :tangle no
printfn "%s" <| getWebPageURL 'b' 1
#+end_src

#+RESULTS:
: https://tagalog.pinoydictionary.com/list/b/1/



** Migaku stuff

#+begin_src fsharp :results output :session
type MigakuDictEntry = {
    term : string
    altterm : string
    pronunciation : string
    definition : string
    pos : string
    examples: string
    audio : string
    }

type MigakuConjEntry = {
    inflected : string
    dict : List<string>
    }

let createMigakuDictEntry (word:string) (def:string) : MigakuDictEntry = {
    term = word
    altterm = ""
    pronunciation = ""
    definition = def
    pos = ""
    examples = ""
    audio = ""
    }

let createMigakuConjEntry
    (word:string)
    (conjugations:List<string>)
    : List<MigakuConjEntry> =
    if conjugations = [] then [] else
        conjugations |> List.map (fun conj -> {inflected = conj; dict = [word]})
#+end_src

#+RESULTS:



** Scrape site
#+begin_src fsharp :results output :session
let scrapeSite : string ->  List<MigakuDictEntry> * List<MigakuConjEntry> =
    fun url->
        let doc = HtmlDocument.Load(url)
        let words = doc.CssSelect(".word-group")
        let dicList =
            words
            |> List.map wordGroupToEntry
            |> List.map (fun entry ->
                         createMigakuDictEntry entry.Word entry.Definition)
        let conjList =
            words
            |> List.map wordGroupToEntry
            |> List.map (fun entry ->
                         createMigakuConjEntry entry.Word entry.Conjugations)
            |> Seq.concat
            |> List.ofSeq
        (dicList, conjList)
#+end_src

#+RESULTS:

*** test av scrape site
#+begin_src fsharp :results output :session :tangle no
let url = getWebPageURL 'a' 4
let result = scrapeSite url
printfn "The result: %A" result
#+end_src

#+RESULTS:
#+begin_example
The result: ([{ term = "abitsuwelas"
    altterm = ""
    pronunciation = ""
    definition = "n., bot. small type of kidney bean"
    pos = ""
    examples = ""
    audio = "" }; { term = "abitswelas"
                    altterm = ""
                    pronunciation = ""
                    definition = "n., bot. variety of kidney beans"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abla"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "n. idle talk; too much talk"
                                    pos = ""
                                    examples = ""
                                    audio = "" }; { term = "abnormal"
                                                    altterm = ""
                                                    pronunciation = ""
                                                    definition = "adj. abnormal"
                                                    pos = ""
                                                    examples = ""
                                                    audio = "" };
  { term = "abo"
    altterm = ""
    pronunciation = ""
    definition = "n. ash; ashes"
    pos = ""
    examples = ""
    audio = "" }; { term = "abog"
                    altterm = ""
                    pronunciation = ""
                    definition = "n. 1. notice; 2. noise"
                    pos = ""
                    examples = ""
                    audio = "" };
  { term = "abogado"
    altterm = ""
    pronunciation = ""
    definition =
     "n. 1. lawyer; attorney; 2. solicitor; lawyer (for government); 3. councel"
    pos = ""
    examples = ""
    audio = "" }; { term = "abogasia"
                    altterm = ""
                    pronunciation = ""
                    definition = "n. law; the legal profession"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abogasya"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "n. law; the legal profession"
                                    pos = ""
                                    examples = ""
                                    audio = "" }; { term = "abok"
                                                    altterm = ""
                                                    pronunciation = ""
                                                    definition = "n. dust"
                                                    pos = ""
                                                    examples = ""
                                                    audio = "" };
  { term = "abokado"
    altterm = ""
    pronunciation = ""
    definition = "n., bot. avocado"
    pos = ""
    examples = ""
    audio = "" };
  { term = "abonado"
    altterm = ""
    pronunciation = ""
    definition =
     "adj. ref. to a person who add money to someone else, because he is short of money"
    pos = ""
    examples = ""
    audio = "" }; { term = "abono"
                    altterm = ""
                    pronunciation = ""
                    definition = "n. 1. fertilizer; 2. payment in advance"
                    pos = ""
                    examples = ""
                    audio = "" };
  { term = "abonohan"
    altterm = ""
    pronunciation = ""
    definition = "v., inf. 1. fertilize; 2. disburse or pay in advance"
    pos = ""
    examples = ""
    audio = "" }; { term = "aborsiyon"
                    altterm = ""
                    pronunciation = ""
                    definition = "n. abortion"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abot"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "adj. within reach"
                                    pos = ""
                                    examples = ""
                                    audio = "" };
  { term = "abot"
    altterm = ""
    pronunciation = ""
    definition = "n. power; capacity; range"
    pos = ""
    examples = ""
    audio = "" }; { term = "abot"
                    altterm = ""
                    pronunciation = ""
                    definition = "adj. overtaken; abreast with"
                    pos = ""
                    examples = ""
                    audio = "" };
  { term = "abot ng isang kabisa"
    altterm = ""
    pronunciation = ""
    definition = "comp., n., mat. linear function"
    pos = ""
    examples = ""
    audio = "" }; { term = "abot ng isip"
                    altterm = ""
                    pronunciation = ""
                    definition = "comp., n. scope; distance the mind can reach"
                    pos = ""
                    examples = ""
                    audio = "" }],
 [{ inflected = "inaabonohan"
    dict = ["abonohan"] }; { inflected = "inabonohan"
                             dict = ["abonohan"] }; { inflected = "aabonohan"
                                                      dict = ["abonohan"] }])
val url : string = "https://tagalog.pinoydictionary.com/list/a/4/"
val result : List<MigakuDictEntry> * List<MigakuConjEntry> =
  ([{ term = "abitsuwelas"
      altterm = ""
      pronunciation = ""
      definition = "n., bot. small type of kidney bean"
      pos = ""
      examples = ""
      audio = "" }; { term = "abitswelas"
                      altterm = ""
                      pronunciation = ""
                      definition = "n., bot. variety of kidney beans"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abla"
      altterm = ""
      pronunciation = ""
      definition = "n. idle talk; too much talk"
      pos = ""
      examples = ""
      audio = "" }; { term = "abnormal"
                      altterm = ""
                      pronunciation = ""
                      definition = "adj. abnormal"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abo"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "n. ash; ashes"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abog"
      altterm = ""
      pronunciation = ""
      definition = "n. 1. notice; 2. noise"
      pos = ""
      examples = ""
      audio = "" };
    { term = "abogado"
      altterm = ""
      pronunciation = ""
      definition =
       "n. 1. lawyer; attorney; 2. solicitor; lawyer (for government)"+[12 chars]
      pos = ""
      examples = ""
      audio = "" }; { term = "abogasia"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. law; the legal profession"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abogasya"
      altterm = ""
      pronunciation = ""
      definition = "n. law; the legal profession"
      pos = ""
      examples = ""
      audio = "" }; { term = "abok"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. dust"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abokado"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "n., bot. avocado"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abonado"
      altterm = ""
      pronunciation = ""
      definition =
       "adj. ref. to a person who add money to someone else, because "+[20 chars]
      pos = ""
      examples = ""
      audio = "" }; { term = "abono"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. 1. fertilizer; 2. payment in advance"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abonohan"
      altterm = ""
      pronunciation = ""
      definition = "v., inf. 1. fertilize; 2. disburse or pay in advance"
      pos = ""
      examples = ""
      audio = "" }; { term = "aborsiyon"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. abortion"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abot"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "adj. within reach"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abot"
      altterm = ""
      pronunciation = ""
      definition = "n. power; capacity; range"
      pos = ""
      examples = ""
      audio = "" }; { term = "abot"
                      altterm = ""
                      pronunciation = ""
                      definition = "adj. overtaken; abreast with"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abot ng isang kabisa"
      altterm = ""
      pronunciation = ""
      definition = "comp., n., mat. linear function"
      pos = ""
      examples = ""
      audio = "" };
    { term = "abot ng isip"
      altterm = ""
      pronunciation = ""
      definition = "comp., n. scope; distance the mind can reach"
      pos = ""
      examples = ""
      audio = "" }],
   [{ inflected = "inaabonohan"
      dict = ["abonohan"] }; { inflected = "inabonohan"
                               dict = ["abonohan"] };
    { inflected = "aabonohan"
      dict = ["abonohan"] }])
#+end_example


** Scrape whole website
#+begin_src fsharp :results output :session
let scrape : unit -> unit =
    fun () ->
        let mutable dic = []
        let mutable conj = []
        //for letterID in ['a' .. 'z'] do
        for charID in ['z'] do
            let mutable intID = 1
            let mutable loop = true
            while loop do
                let URL = getWebPageURL charID intID
                printfn "Checking: %s" URL
                let request = Http.Request(URL, silentHttpErrors = true)
                let status = request.StatusCode

                if status = 404 then do
                    loop <- false
                else do
                    let dicList, conjList = scrapeSite URL
                    dic <- dic @ dicList
                    conj <- conj @ conjList
                    intID <- intID + 1
        printfn "Writing.."
        let dic_json = Json.serialize dic
        let conj_json = Json.serialize conj
        File.WriteAllText ("dictionary.json", dic_json)
        File.WriteAllText ("conjugations.json", conj_json)
        printfn "Finnished!"


scrape ()
#+end_src

#+RESULTS:
: hello!
: val scrape : unit -> unit

* Test 
:PROPERTIES:
:header-args: :tangle no
:END:


** Scraping test
*** Header 

#+begin_src fsharp :results output :session
#r "nuget: FSharp.Data, 4.0.1"
#r "nuget: FsVerbalExpressions, 0.6.1"

open FSharp.Data
//open System.Text.RegularExpressions
open FsVerbalExpressions.FsRegEx

//let doc = HtmlDocument.Load("https://google.com")
//printfn "The site: %A" doc
printfn "Hello world with regex (good tho)!"
#+end_src

#+RESULTS:
: /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: [Loading /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj.fsx]
: namespace FSI_0002.Project
: 
: Hello world with regex (good tho)!
*** Helper function

#+begin_src fsharp :results output :session
let firstChildText selector (post : HtmlNode) =
    post.CssSelect(selector).[0].DirectInnerText().Trim()
#+end_src

#+RESULTS:

*** Actual testning

**** Konvertera wordgroup html node till relevanta saker
#+begin_src fsharp :results output :session
let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/")
#+end_src

#+RESULTS:


#+begin_src fsharp :results output :session
let wordGroupToWord (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".word-entry").[0]
    |> firstChildText "a"

let wordGroupToInfo (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".definition").[0]
    |> firstChildText "p"


let words = doc.CssSelect(".word-group")

//let example_word = words.[0].CssSelect(".definition").[0]
let example_word_group = words.[6]
//let test = example_word.CssSelect(".word")
let test_word = wordGroupToWord example_word_group
let test_info = wordGroupToInfo example_word_group

let wordToEntry (word: HtmlNode) : Entry = {Word = ""
                                            Definition = ""
                                            Conjugations = []}

printfn "The word: %A. The info: %A." test_word test_info
#+end_src

#+RESULTS:

**** Regex stuff

#+begin_src fsharp :results output :session
let test_string = "stuff (isinasali, isinali, isasali) inff., inf. in. clude someone as a participant"

let test_string2 = "stuutuf inf. this should (should, not) . not be in"
//let result =  Regex.Match (test_string, "(.+?)\." )
//let result_paren = Regex.Match (result, "(.+)")
//printfn "The result is %A" <| result.GetType ()
let infoToConjugations (info:string) : List<string> =
    let prefix = @"(.+?)\."
    let parenthesis = @"\((?<conjugations>.*)\)"
    info
    |> matches prefix
    |> Array.head
    |> sprintf "%A"
    |> capture parenthesis "conjugations"
    |> sprintf "%s"
    |> fun str -> str.Split [|','|]
    |> Seq.map (fun str -> str.Trim ())
    |> Seq.toList
    |> fun lst -> if lst = [""] then [] else lst
    //|> List.map String.Trim


let infoToDefinitions (info:string) : string =
    let suffix = @"\w*\.(.+)"
    info
    |> matches suffix
    |> Array.head
    |> sprintf "%A"


let result = infoToDefinitions test_string

printfn "type of hello: %A" <| result.GetType ()
printfn "the value of result: %A" <| result
#+end_src

#+RESULTS:
#+begin_example
Binding session to '/home/john/.nuget/packages/fsverbalexpressions/0.6.1/lib/net461/FsVerbalExpressions.dll'...
type of hello: System.String
the value of result: "inff., inf. in. clude someone as a participant"
val test_string : string =
  "stuff (isinasali, isinali, isasali) inff., inf. in. clude som"+[21 chars]
val test_string2 : string =
  "stuutuf inf. this should (should, not) . not be in"
val infoToConjugations : info:string -> List<string>
val infoToDefinitions : info:string -> string
val result : string = "inff., inf. in. clude someone as a participant"
#+end_example

**** List index

#+begin_src fsharp :results output
printfn "first number %A" <| List.head [1;2;3]
#+end_src

#+RESULTS:
: first number 1

**** Data modelling

#+begin_src fsharp :results output :session
type Entry = {Word: string
              Definition: string
              Conjugations: list<string>}

let word_hello : Entry = {Word= "Hello"
                          Definition= "A common greeting"
                          Conjugations= [ "Hi"; "Yo" ]}

printfn "The word_hello Conjugations: %A" word_hello.Conjugations.[0]
#+end_src

#+RESULTS:
: The word_hello Conjugations: "Hi"
: type Entry =
:   { Word: string
:     Definition: string
:     Conjugations: string list }
: val word_hello : Entry = { Word = "Hello"
:                            Definition = "A common greeting"
:                            Conjugations = ["Hi"; "Yo"] }

** File IO test

*** general output testing
#+begin_src fsharp :results output
open System

let file_path = "test.json"
let string_list = ["testar med bara System"; "testar på haskell func form"; "third line"]


File.WriteAllLines (file_path, string_list)
let concat_string = sprintf "%A %A" "hello" " world"
let plus_string = "hello" + " world"
let normal_string = "hello"

#+end_src

#+RESULTS:

*** Med json
#+begin_src fsharp :results output
#r "nuget: FSharp.Json, 0.4.0"
open FSharp.Json
open System
open System.IO

let file_path = "garage.json"

type Vehicle = {
    wheel_number : int
    steering_wheel : bool
    }

let car : Vehicle = {wheel_number = 4; steering_wheel= true}
let mc : Vehicle = {wheel_number = 2; steering_wheel= false}

let garage : List<Vehicle> = [ car; mc ]
let json = Json.serialize garage

File.WriteAllText (file_path, json)
printfn "sucess?"
#+end_src

#+RESULTS:
#+begin_example
[Loading /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj.fsx]
namespace FSI_0035.Project

sucess?
val file_path : string = "garage.json"
type Vehicle =
  { wheel_number: int
    steering_wheel: bool }
val car : Vehicle = { wheel_number = 4
                      steering_wheel = true }
val mc : Vehicle = { wheel_number = 2
                     steering_wheel = false }
val garage : List<Vehicle> =
  [{ wheel_number = 4
     steering_wheel = true }; { wheel_number = 2
                                steering_wheel = false }]
val json : string =
  "[
  {
    "wheel_number": 4,
    "steering_wheel": true
  },
"+[60 chars]
#+end_example

** Https request test
#+begin_src fsharp :results output

#r "nuget: FSharp.Data, 4.0.1"
open FSharp.Data
//let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/yolo")
let doc2 = Http.Request("https://tagalog.pinoydictionary.com", silentHttpErrors = true)
printfn "%A" doc2.StatusCode
#+end_src

#+RESULTS:
#+begin_example
/tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
/tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
[Loading /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj.fsx]
namespace FSI_0022.Project

200
val doc2 : HttpResponse =
  { Body =
     Text
       "<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8""+[17346 chars]
    StatusCode = 200
    ResponseUrl = "https://tagalog.pinoydictionary.com"
    Headers =
     map
       [("Alt-Svc", "h3-27=":443", h3-28=":443", h3-29=":443", h3=":443"");
        ("CF-Cache-Status", "DYNAMIC"); ("CF-RAY", "6614af5d6ff60d2e-ARN");
        ("Connection", "keep-alive");
        ("Content-Type", "text/html; charset=utf-8");
        ("Date", "Fri, 18 Jun 2021 12:57:43 GMT");
        ("Expect-CT",
         "max-age=604800, report-uri="https://report-uri.cloudflare.com"+[26 chars]);
        ("NEL", "{"report_to":"cf-nel","max_age":604800}");
        ("Report-To",
         "{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\"+[200 chars]);
        ...]
    Cookies = map [] }
#+end_example


** Hemsidan och wordgroups

#+begin_src fsharp :results output :session
let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/")
let words = doc.CssSelect(".word-group")
#+end_src

#+RESULTS:
: val doc : HtmlDocument =
:   <!DOCTYPE html>
: <html lang="en">
:   <head>
:     <meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /><meta name="robots" content="noarchive" /><meta name="googlebot" content="noarchive" /><meta name="google" content="notranslate" /><meta name="generator" content="WordPress 4.9.7" /><title>Tagalog Dictionary</title><meta property="og:image" content="https://www.pinoydictionary.c...



** Valid websites

#+begin_src fsharp :results output :session
let rec getMaxIndex (char:string) (index: int) : int =
    let URL = getWebPageURL char index
    let request = Http.Request(URL, silentHttpErrors = true)
    let status = request.StatusCode
    
    if status = 404 then index
    else if index >= 1 then getMaxIndex char (index + 1)
    else -1

let result = getMaxIndex 'a" 70
printfn "result: %A" result
#+end_src

#+RESULTS:
: result: 89
: val getMaxIndex : char:string -> index:int -> int
: val result : int = 89


** Get webpage old

#+begin_src fsharp :results output :session
let getWebPageURL (char:char) (number:int) : string = 
    if number = 1 then 
        sprintf "%s/%O" 
            "https://tagalog.pinoydictionary.com/list" char
    else
        sprintf "%s/%O/%s/"
            "https://tagalog.pinoydictionary.com/list"
            char
            (string number)
#+end_src

#+RESULTS:


*** Test av getWebPageURL
#+begin_src fsharp :results output :session :tangle no
printfn "%s" <| getWebPageURL 'b' 2
#+end_src

#+RESULTS:
: https://tagalog.pinoydictionary.com/list/b/2/


