#+title: Tagalog dictionary scraper
#+description: Scrapes the dictionary "" and saves it to the file dictionary.json and conjugations.json in the migaku format.

* Scraper

** Header

#+begin_src fsharp :results output :session
#r "nuget: FSharp.Data, 4.0.1"
#r "nuget: FsVerbalExpressions, 0.6.1"
#r "nuget: FSharp.Json, 0.4.0"

open FSharp.Data
open FsVerbalExpressions.FsRegEx
open System
open System.IO
open FSharp.Json

printfn "Header works"
#+end_src

#+RESULTS:
: /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: [Loading /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj.fsx]
: namespace FSI_0051.Project
: 
: Header works


** Entry type

#+begin_src fsharp :results output :session
type Entry = {Word: string
              Definition: string
              Conjugations: list<string>}
#+end_src

#+RESULTS:


** Helper function firstChildText

#+begin_src fsharp :results output :session
let firstChildText selector (post : HtmlNode) =
    post.CssSelect(selector).[0].DirectInnerText().Trim()
#+end_src

#+RESULTS:


** Konvertera wordgroup html node till relevanta saker

#+begin_src fsharp :results output :session
let wordGroupToWord (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".word-entry").[0]
    |> firstChildText "a"

let wordGroupToInfo (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".definition").[0]
    |> firstChildText "p"
#+end_src

#+RESULTS:


** Regex stuff

#+begin_src fsharp :results output :session
let infoToConjugations (info:string) : List<string> =
    let prefix = @"(.+?)\."
    let parenthesis = @"\((?<conjugations>.*)\)"
    info
    |> matches prefix
    |> Array.head
    |> sprintf "%A"
    |> capture parenthesis "conjugations"
    |> sprintf "%s"
    |> fun str -> str.Split [|','|]
    |> Seq.map (fun str -> str.Trim ())
    |> Seq.toList
    |> fun lst -> if lst = [""] then [] else lst
    //|> List.map String.Trim


let infoToDefinitions (info:string) : string =
    let suffix = @"\w*\.(.+)"
    info
    |> matches suffix
    |> Array.head
    |> sprintf "%A"
#+end_src

#+RESULTS:



** wordGroupToEntry (samt wordGroupToConj och wordGroupToDef)

#+begin_src fsharp :results output :session
let wordGroupToConj (wordgroup : HtmlNode) : List<string> =
    wordgroup
    |> wordGroupToInfo
    |> infoToConjugations
    

let wordGroupToDef (wordgroup : HtmlNode) : string =
    wordgroup
    |> wordGroupToInfo
    |> infoToDefinitions
    
let wordGroupToEntry (wordgroup : HtmlNode) : Entry =
    {Word = wordGroupToWord wordgroup
     Definition = wordGroupToDef wordgroup
     Conjugations = wordGroupToConj wordgroup}
#+end_src

#+RESULTS:


*** Test av wordGroupToEntry

#+begin_src fsharp :results output :session :tangle no
let result = wordGroupToEntry words.[2]
printfn "The result: %A" result
#+end_src

#+RESULTS:
: The result: { Word = "dagit"
:   Definition = "n. swooping and seizing while in flight"
:   Conjugations = [] }
: val result : Entry = { Word = "dagit"
:                        Definition = "n. swooping and seizing while in flight"
:                        Conjugations = [] }



** Get webpage

#+begin_src fsharp :results output :session
let getWebPageURL (char:char) (number:int) : string = 
    if number = 1 then 
        sprintf "%s/%O" 
            "https://tagalog.pinoydictionary.com/list" char
    else
        sprintf "%s/%O/%s/"
            "https://tagalog.pinoydictionary.com/list"
            char
            (string number)
#+end_src

#+RESULTS:


*** Test av getWebPageURL
#+begin_src fsharp :results output :session :tangle no
printfn "%s" <| getWebPageURL 'b' 2
#+end_src

#+RESULTS:
: https://tagalog.pinoydictionary.com/list/b/2/



** Migaku stuff

#+begin_src fsharp :results output :session
type MigakuDictEntry = {
    term : string
    altterm : string
    pronunciation : string
    definition : string
    pos : string
    examples: string
    audio : string
    }

type MigakuConjEntry = {
    inflected : string
    dict : List<string>
    }

let createMigakuDictEntry (word:string) (def:string) : MigakuDictEntry = {
    term = word
    altterm = ""
    pronunciation = ""
    definition = def
    pos = ""
    examples = ""
    audio = ""
    }

let createMigakuConjEntry
    (word:string)
    (conjugations:List<string>)
    : List<MigakuConjEntry> =
    if conjugations = [] then [] else
        conjugations |> List.map (fun conj -> {inflected = conj; dict = [word]})
#+end_src

#+RESULTS:



** Scrape site
#+begin_src fsharp :results output :session
let scrapeSite : char -> int ->  List<MigakuDictEntry> * List<MigakuConjEntry> =
    fun charID intID ->
        let url = getWebPageURL charID intID
        let doc = HtmlDocument.Load(url)
        let words = doc.CssSelect(".word-group")
        let dicList =
            words
            |> List.map wordGroupToEntry
            |> List.map (fun entry ->
                         createMigakuDictEntry entry.Word entry.Definition)
        let conjList =
            words
            |> List.map wordGroupToEntry
            |> List.map (fun entry ->
                         createMigakuConjEntry entry.Word entry.Conjugations)
            |> Seq.concat
            |> List.ofSeq
        (dicList, conjList)
#+end_src

#+RESULTS:

*** test av scrape site
#+begin_src fsharp :results output :session :tangle no
let result = scrapeSite 'a' 5
printfn "The result: %A" result
#+end_src

#+RESULTS:
#+begin_example
The result: ([{ term = "abot ng mata"
    altterm = ""
    pronunciation = ""
    definition = "comp., n. visibility"
    pos = ""
    examples = ""
    audio = "" }; { term = "abot ng tanaw"
                    altterm = ""
                    pronunciation = ""
                    definition = "comp., n. visibility"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abot ng tingin"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "comp., n. visibility"
                                    pos = ""
                                    examples = ""
                                    audio = "" };
  { term = "abot-dinig"
    altterm = ""
    pronunciation = ""
    definition = "adj. within hearing"
    pos = ""
    examples = ""
    audio = "" }; { term = "abot-isip"
                    altterm = ""
                    pronunciation = ""
                    definition = "adv. within mental grasp"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abot-tanaw"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "adj. within seeing distance"
                                    pos = ""
                                    examples = ""
                                    audio = "" }; { term = "abot-tanaw"
                                                    altterm = ""
                                                    pronunciation = ""
                                                    definition = "n. horizon"
                                                    pos = ""
                                                    examples = ""
                                                    audio = "" };
  { term = "abot-tingin"
    altterm = ""
    pronunciation = ""
    definition = "n. visibility"
    pos = ""
    examples = ""
    audio = "" }; { term = "aboy"
                    altterm = ""
                    pronunciation = ""
                    definition = "adj. being driven to a certain place"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abrasador"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "n. leg pillow"
                                    pos = ""
                                    examples = ""
                                    audio = "" };
  { term = "abrasadurin"
    altterm = ""
    pronunciation = ""
    definition = "v., inf. use as leg pillow"
    pos = ""
    examples = ""
    audio = "" }; { term = "abrasete"
                    altterm = ""
                    pronunciation = ""
                    definition = "adj., adv. walking arm-in-arm"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abrasibo"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "adj. abrasive"
                                    pos = ""
                                    examples = ""
                                    audio = "" };
  { term = "abrigo"
    altterm = ""
    pronunciation = ""
    definition = "n. overcoat; sweater"
    pos = ""
    examples = ""
    audio = "" };
  { term = "abriguhan"
    altterm = ""
    pronunciation = ""
    definition = "v., inf. put an overcoat or sweater on someone"
    pos = ""
    examples = ""
    audio = "" }; { term = "Abril"
                    altterm = ""
                    pronunciation = ""
                    definition = "n. April (month)"
                    pos = ""
                    examples = ""
                    audio = "" }; { term = "abrilata"
                                    altterm = ""
                                    pronunciation = ""
                                    definition = "n. can-opener"
                                    pos = ""
                                    examples = ""
                                    audio = "" };
  { term = "abrisete"
    altterm = ""
    pronunciation = ""
    definition = "adj., adv. walking arm-in-arm"
    pos = ""
    examples = ""
    audio = "" }; { term = "absen"
                    altterm = ""
                    pronunciation = ""
                    definition = "n., adj. absence [n]; absent [adj.]"
                    pos = ""
                    examples = ""
                    audio = "" };
  { term = "absent"
    altterm = ""
    pronunciation = ""
    definition = "n., adj. absence [n]; absent [adj.]"
    pos = ""
    examples = ""
    audio = "" }],
 [{ inflected = "inaabrasador"
    dict = ["abrasadurin"] }; { inflected = "inabrasador"
                                dict = ["abrasadurin"] };
  { inflected = "aabrasadurin"
    dict = ["abrasadurin"] }; { inflected = "inaabriguhan"
                                dict = ["abriguhan"] };
  { inflected = "inabriguhan"
    dict = ["abriguhan"] }; { inflected = "aabriguhan"
                              dict = ["abriguhan"] }])
val result : List<MigakuDictEntry> * List<MigakuConjEntry> =
  ([{ term = "abot ng mata"
      altterm = ""
      pronunciation = ""
      definition = "comp., n. visibility"
      pos = ""
      examples = ""
      audio = "" }; { term = "abot ng tanaw"
                      altterm = ""
                      pronunciation = ""
                      definition = "comp., n. visibility"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abot ng tingin"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "comp., n. visibility"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abot-dinig"
      altterm = ""
      pronunciation = ""
      definition = "adj. within hearing"
      pos = ""
      examples = ""
      audio = "" }; { term = "abot-isip"
                      altterm = ""
                      pronunciation = ""
                      definition = "adv. within mental grasp"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abot-tanaw"
      altterm = ""
      pronunciation = ""
      definition = "adj. within seeing distance"
      pos = ""
      examples = ""
      audio = "" }; { term = "abot-tanaw"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. horizon"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abot-tingin"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "n. visibility"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "aboy"
      altterm = ""
      pronunciation = ""
      definition = "adj. being driven to a certain place"
      pos = ""
      examples = ""
      audio = "" }; { term = "abrasador"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. leg pillow"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "abrasadurin"
      altterm = ""
      pronunciation = ""
      definition = "v., inf. use as leg pillow"
      pos = ""
      examples = ""
      audio = "" }; { term = "abrasete"
                      altterm = ""
                      pronunciation = ""
                      definition = "adj., adv. walking arm-in-arm"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abrasibo"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "adj. abrasive"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abrigo"
      altterm = ""
      pronunciation = ""
      definition = "n. overcoat; sweater"
      pos = ""
      examples = ""
      audio = "" };
    { term = "abriguhan"
      altterm = ""
      pronunciation = ""
      definition = "v., inf. put an overcoat or sweater on someone"
      pos = ""
      examples = ""
      audio = "" }; { term = "Abril"
                      altterm = ""
                      pronunciation = ""
                      definition = "n. April (month)"
                      pos = ""
                      examples = ""
                      audio = "" }; { term = "abrilata"
                                      altterm = ""
                                      pronunciation = ""
                                      definition = "n. can-opener"
                                      pos = ""
                                      examples = ""
                                      audio = "" };
    { term = "abrisete"
      altterm = ""
      pronunciation = ""
      definition = "adj., adv. walking arm-in-arm"
      pos = ""
      examples = ""
      audio = "" }; { term = "absen"
                      altterm = ""
                      pronunciation = ""
                      definition = "n., adj. absence [n]; absent [adj.]"
                      pos = ""
                      examples = ""
                      audio = "" };
    { term = "absent"
      altterm = ""
      pronunciation = ""
      definition = "n., adj. absence [n]; absent [adj.]"
      pos = ""
      examples = ""
      audio = "" }],
   [{ inflected = "inaabrasador"
      dict = ["abrasadurin"] }; { inflected = "inabrasador"
                                  dict = ["abrasadurin"] };
    { inflected = "aabrasadurin"
      dict = ["abrasadurin"] }; { inflected = "inaabriguhan"
                                  dict = ["abriguhan"] };
    { inflected = "inabriguhan"
      dict = ["abriguhan"] }; { inflected = "aabriguhan"
                                dict = ["abriguhan"] }])
#+end_example


** Scrape whole website
#+begin_src fsharp :results output :session
let scrape : unit -> unit =
    fun () ->
        for letterID in ['a' .. 'z'] do
            for numberID in [1 .. 9] do
                printfn "%c%i" letterID numberID
                let request = Http.Request(URL, silentHttpErrors = true)
                let status = request.StatusCode

                if status = 404 then index
                else if index >= 1 then getMaxIndex char (index + 1)
                else -1


scrape ()
#+end_src

#+RESULTS:
#+begin_example
a1
a2
a3
a4
a5
a6
a7
a8
a9
b1
b2
b3
b4
b5
b6
b7
b8
b9
c1
c2
c3
c4
c5
c6
c7
c8
c9
d1
d2
d3
d4
d5
d6
d7
d8
d9
e1
e2
e3
e4
e5
e6
e7
e8
e9
f1
f2
f3
f4
f5
f6
f7
f8
f9
g1
g2
g3
g4
g5
g6
g7
g8
g9
h1
h2
h3
h4
h5
h6
h7
h8
h9
i1
i2
i3
i4
i5
i6
i7
i8
i9
j1
j2
j3
j4
j5
j6
j7
j8
j9
k1
k2
k3
k4
k5
k6
k7
k8
k9
l1
l2
l3
l4
l5
l6
l7
l8
l9
m1
m2
m3
m4
m5
m6
m7
m8
m9
n1
n2
n3
n4
n5
n6
n7
n8
n9
o1
o2
o3
o4
o5
o6
o7
o8
o9
p1
p2
p3
p4
p5
p6
p7
p8
p9
q1
q2
q3
q4
q5
q6
q7
q8
q9
r1
r2
r3
r4
r5
r6
r7
r8
r9
s1
s2
s3
s4
s5
s6
s7
s8
s9
t1
t2
t3
t4
t5
t6
t7
t8
t9
u1
u2
u3
u4
u5
u6
u7
u8
u9
v1
v2
v3
v4
v5
v6
v7
v8
v9
w1
w2
w3
w4
w5
w6
w7
w8
w9
x1
x2
x3
x4
x5
x6
x7
x8
x9
y1
y2
y3
y4
y5
y6
y7
y8
y9
z1
z2
z3
z4
z5
z6
z7
z8
z9
val scrape : unit -> unit
#+end_example

* Test

** Scraping test
*** Header 

#+begin_src fsharp :results output :session
#r "nuget: FSharp.Data, 4.0.1"
#r "nuget: FsVerbalExpressions, 0.6.1"

open FSharp.Data
//open System.Text.RegularExpressions
open FsVerbalExpressions.FsRegEx

//let doc = HtmlDocument.Load("https://google.com")
//printfn "The site: %A" doc
printfn "Hello world with regex (good tho)!"
#+end_src

#+RESULTS:
: /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
: [Loading /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj.fsx]
: namespace FSI_0002.Project
: 
: Hello world with regex (good tho)!
*** Helper function

#+begin_src fsharp :results output :session
let firstChildText selector (post : HtmlNode) =
    post.CssSelect(selector).[0].DirectInnerText().Trim()
#+end_src

#+RESULTS:

*** Actual testning

**** Konvertera wordgroup html node till relevanta saker
#+begin_src fsharp :results output :session
let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/")
#+end_src

#+RESULTS:


#+begin_src fsharp :results output :session
let wordGroupToWord (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".word-entry").[0]
    |> firstChildText "a"

let wordGroupToInfo (wordGroup : HtmlNode) : string =
    wordGroup.CssSelect(".definition").[0]
    |> firstChildText "p"


let words = doc.CssSelect(".word-group")

//let example_word = words.[0].CssSelect(".definition").[0]
let example_word_group = words.[6]
//let test = example_word.CssSelect(".word")
let test_word = wordGroupToWord example_word_group
let test_info = wordGroupToInfo example_word_group

let wordToEntry (word: HtmlNode) : Entry = {Word = ""
                                            Definition = ""
                                            Conjugations = []}

printfn "The word: %A. The info: %A." test_word test_info
#+end_src

#+RESULTS:

**** Regex stuff

#+begin_src fsharp :results output :session
let test_string = "stuff (isinasali, isinali, isasali) inff., inf. in. clude someone as a participant"

let test_string2 = "stuutuf inf. this should (should, not) . not be in"
//let result =  Regex.Match (test_string, "(.+?)\." )
//let result_paren = Regex.Match (result, "(.+)")
//printfn "The result is %A" <| result.GetType ()
let infoToConjugations (info:string) : List<string> =
    let prefix = @"(.+?)\."
    let parenthesis = @"\((?<conjugations>.*)\)"
    info
    |> matches prefix
    |> Array.head
    |> sprintf "%A"
    |> capture parenthesis "conjugations"
    |> sprintf "%s"
    |> fun str -> str.Split [|','|]
    |> Seq.map (fun str -> str.Trim ())
    |> Seq.toList
    |> fun lst -> if lst = [""] then [] else lst
    //|> List.map String.Trim


let infoToDefinitions (info:string) : string =
    let suffix = @"\w*\.(.+)"
    info
    |> matches suffix
    |> Array.head
    |> sprintf "%A"


let result = infoToDefinitions test_string

printfn "type of hello: %A" <| result.GetType ()
printfn "the value of result: %A" <| result
#+end_src

#+RESULTS:
#+begin_example
Binding session to '/home/john/.nuget/packages/fsverbalexpressions/0.6.1/lib/net461/FsVerbalExpressions.dll'...
type of hello: System.String
the value of result: "inff., inf. in. clude someone as a participant"
val test_string : string =
  "stuff (isinasali, isinali, isasali) inff., inf. in. clude som"+[21 chars]
val test_string2 : string =
  "stuutuf inf. this should (should, not) . not be in"
val infoToConjugations : info:string -> List<string>
val infoToDefinitions : info:string -> string
val result : string = "inff., inf. in. clude someone as a participant"
#+end_example

**** List index

#+begin_src fsharp :results output
printfn "first number %A" <| List.head [1;2;3]
#+end_src

#+RESULTS:
: first number 1

**** Data modelling

#+begin_src fsharp :results output :session
type Entry = {Word: string
              Definition: string
              Conjugations: list<string>}

let word_hello : Entry = {Word= "Hello"
                          Definition= "A common greeting"
                          Conjugations= [ "Hi"; "Yo" ]}

printfn "The word_hello Conjugations: %A" word_hello.Conjugations.[0]
#+end_src

#+RESULTS:
: The word_hello Conjugations: "Hi"
: type Entry =
:   { Word: string
:     Definition: string
:     Conjugations: string list }
: val word_hello : Entry = { Word = "Hello"
:                            Definition = "A common greeting"
:                            Conjugations = ["Hi"; "Yo"] }

** File IO test

*** general output testing
#+begin_src fsharp :results output
open System

let file_path = "test.json"
let string_list = ["testar med bara System"; "testar på haskell func form"; "third line"]


File.WriteAllLines (file_path, string_list)
let concat_string = sprintf "%A %A" "hello" " world"
let plus_string = "hello" + " world"
let normal_string = "hello"

#+end_src

#+RESULTS:

*** Med json
#+begin_src fsharp :results output
#r "nuget: FSharp.Json, 0.4.0"
open FSharp.Json
open System
open System.IO

let file_path = "garage.json"

type Vehicle = {
    wheel_number : int
    steering_wheel : bool
    }

let car : Vehicle = {wheel_number = 4; steering_wheel= true}
let mc : Vehicle = {wheel_number = 2; steering_wheel= false}

let garage : List<Vehicle> = [ car; mc ]
let json = Json.serialize garage

File.WriteAllText (file_path, json)
printfn "sucess?"
#+end_src

#+RESULTS:
#+begin_example
[Loading /tmp/nuget/25076--ddcd24c9-19c4-40f0-a2f5-4d45003cde70/Project.fsproj.fsx]
namespace FSI_0035.Project

sucess?
val file_path : string = "garage.json"
type Vehicle =
  { wheel_number: int
    steering_wheel: bool }
val car : Vehicle = { wheel_number = 4
                      steering_wheel = true }
val mc : Vehicle = { wheel_number = 2
                     steering_wheel = false }
val garage : List<Vehicle> =
  [{ wheel_number = 4
     steering_wheel = true }; { wheel_number = 2
                                steering_wheel = false }]
val json : string =
  "[
  {
    "wheel_number": 4,
    "steering_wheel": true
  },
"+[60 chars]
#+end_example

** Https request test
#+begin_src fsharp :results output

#r "nuget: FSharp.Data, 4.0.1"
open FSharp.Data
//let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/yolo")
let doc2 = Http.Request("https://tagalog.pinoydictionary.com", silentHttpErrors = true)
printfn "%A" doc2.StatusCode
#+end_src

#+RESULTS:
#+begin_example
/tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
/tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj : warning NU1701: Package 'FsVerbalExpressions 0.6.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully compatible with your project.
[Loading /tmp/nuget/7763--ac3baa45-86cc-4299-863c-bf814c325a84/Project.fsproj.fsx]
namespace FSI_0022.Project

200
val doc2 : HttpResponse =
  { Body =
     Text
       "<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8""+[17346 chars]
    StatusCode = 200
    ResponseUrl = "https://tagalog.pinoydictionary.com"
    Headers =
     map
       [("Alt-Svc", "h3-27=":443", h3-28=":443", h3-29=":443", h3=":443"");
        ("CF-Cache-Status", "DYNAMIC"); ("CF-RAY", "6614af5d6ff60d2e-ARN");
        ("Connection", "keep-alive");
        ("Content-Type", "text/html; charset=utf-8");
        ("Date", "Fri, 18 Jun 2021 12:57:43 GMT");
        ("Expect-CT",
         "max-age=604800, report-uri="https://report-uri.cloudflare.com"+[26 chars]);
        ("NEL", "{"report_to":"cf-nel","max_age":604800}");
        ("Report-To",
         "{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\"+[200 chars]);
        ...]
    Cookies = map [] }
#+end_example


** Hemsidan och wordgroups

#+begin_src fsharp :results output :session
let doc = HtmlDocument.Load("https://tagalog.pinoydictionary.com/")
let words = doc.CssSelect(".word-group")
#+end_src

#+RESULTS:
: val doc : HtmlDocument =
:   <!DOCTYPE html>
: <html lang="en">
:   <head>
:     <meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /><meta name="robots" content="noarchive" /><meta name="googlebot" content="noarchive" /><meta name="google" content="notranslate" /><meta name="generator" content="WordPress 4.9.7" /><title>Tagalog Dictionary</title><meta property="og:image" content="https://www.pinoydictionary.c...



** Valid websites

#+begin_src fsharp :results output :session
let rec getMaxIndex (char:string) (index: int) : int =
    let URL = getWebPageURL char index
    let request = Http.Request(URL, silentHttpErrors = true)
    let status = request.StatusCode
    
    if status = 404 then index
    else if index >= 1 then getMaxIndex char (index + 1)
    else -1

let result = getMaxIndex 'a" 70
printfn "result: %A" result
#+end_src

#+RESULTS:
: result: 89
: val getMaxIndex : char:string -> index:int -> int
: val result : int = 89

